#!/usr/bin/env php
<?php

/**
 * Example commandline front controller
 *
 * The commandline tool is useful for providing ad-hoc access to our class implementations
 */

// If we're running from phar load the phar autoload file.
$pharPath = \Phar::running(true);
if ($pharPath) {
    require_once "$pharPath/vendor/autoload.php";
} else {
    if (file_exists(__DIR__.'/vendor/autoload.php')) {
        require_once __DIR__.'/vendor/autoload.php';
    } elseif (file_exists(__DIR__.'/../../autoload.php')) {
        require_once __DIR__ . '/../../autoload.php';
    }
}

// Define our Runner, and pass it the command classes we provide.
$commandClasses = [ \ExampleProject\Cli\ExampleCommands::class ];
$runner = new \Robo\Runner($commandClasses);

// Add the self-update command to our runner
$selfUpdateRepository = 'g-1-a/starter';
$runner->setSelfUpdateRepository($selfUpdateRepository);

// Prepare the variables we need to run the command
$argv = $_SERVER['argv'];
$appName = "ExampleProject";
$appVersion = file_get_contents(__DIR__ . '/VERSION');
$output = new \Symfony\Component\Console\Output\ConsoleOutput();

// Execute the command and return the result.
$statusCode = $runner->execute($argv, $appName, $appVersion, $output);
exit($statusCode);
